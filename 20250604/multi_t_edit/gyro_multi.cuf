module constants
  implicit none 
  real, parameter :: q = -1.602e-19 !기본 전하
  real, parameter :: m = 9.109e-31  !질량
  real, parameter :: kB = 1.381e-23  !볼츠만
  real, parameter :: T = 100.0   !온도
  integer, parameter :: N = 100   !입자 수
  real, parameter :: I=1000.0  !전류 (A)
  real, parameter :: pi = 3.141592653589793d0  ! 원주율
  real, parameter :: mu0 = 4.d0 * pi * 1.d-7   ! ｍｕ０
end module constants

module magnetic_field  !자기장(직선전류)
  use constants
  implicit none
contains
  subroutine Bfield(x, y, z, Bx, By, Bz)
    real(8), value :: x, y, z
    real(8), intent(out) :: Bx, By, Bz
    real(8) :: r2, r, Btheta

    r2 = x*x + y*y
    if (r2 == 0.d0) then
      Bx = 0.d0
      By = 0.d0
      Bz = 0.d0
      return
    end if

    r = sqrt(r2)
    Btheta = mu0 * I / (2.d0 * pi * r)

    Bx = -Btheta * y / r
    By =  Btheta * x / r
    Bz = 0.d0
  end subroutine Bfield
end module magnetic_field

module derivatives
  use constants
  use magnetic_field
  implicit none
contains
  attributes(device) subroutine deriv(r, v, drdt, dvdt)
    real, intent(in) :: r(3), v(3)
    real, intent(out) :: drdt(3), dvdt(3)
    real :: B(3), F(3)
    drdt = v
    Bfield(r(1), r(2), r(3), B(1), B(2), B(3))
    F(1) = q * (v(2)*B(3) - v(3)*B(2))
    F(2) = q * (v(3)*B(1) - v(1)*B(3))
    F(3) = q * (v(1)*B(2) - v(2)*B(1))
    dvdt = F / m
  end subroutine deriv
end module derivatives

attributes(global) subroutine rk4_kernel(r, v, dt, steps)
  use constants    !rk4
  use derivatives
  integer, value :: steps
  real, value :: dt
  real, dimension(3,N), device :: r, v

  integer :: tid, i, j
  real :: pos(3), vel(3)
  real :: k1r(3), k2r(3), k3r(3), k4r(3)
  real :: k1v(3), k2v(3), k3v(3), k4v(3)
  real :: pos_tmp(3), vel_tmp(3)

  tid = threadIdx%x + (blockIdx%x - 1) * blockDim%x
  if (tid<1 .or. tid > N) return

  pos = r(:, tid)
  vel = v(:, tid)

  do i = 1, steps
    call deriv(pos, vel, k1r, k1v)
    do j = 1, 3
      pos_tmp(j) = pos(j) + 0.5*dt*k1r(j)
      vel_tmp(j) = vel(j) + 0.5*dt*k1v(j)
    end do
    call deriv(pos_tmp, vel_tmp, k2r, k2v)
    do j = 1, 3
      pos_tmp(j) = pos(j) + 0.5*dt*k2r(j)
      vel_tmp(j) = vel(j) + 0.5*dt*k2v(j)
    end do
    call deriv(pos_tmp, vel_tmp, k3r, k3v)
    do j = 1, 3
      pos_tmp(j) = pos(j) + dt*k3r(j)
      vel_tmp(j) = vel(j) + dt*k3v(j)
    end do
    call deriv(pos_tmp, vel_tmp, k4r, k4v)

    do j = 1, 3
      pos(j) = pos(j) + dt/6.0 * (k1r(j) + 2*k2r(j) + 2*k3r(j) + k4r(j))
      vel(j) = vel(j) + dt/6.0 * (k1v(j) + 2*k2v(j) + 2*k3v(j) + k4v(j))
    end do
  end do

  r(:, tid) = pos
  v(:, tid) = vel
end subroutine rk4_kernel

program main
  use cudafor
  use iso_c_binding
  use constants
  implicit none

  real, allocatable, target :: r_h(:,:), v_h(:,:)
  real, device :: r_d(3,N), v_d(3,N)
  integer :: i, steps, threadsPerBlock, numBlocks
  real :: dt, sigma, vx, vy, vz

  allocate(r_h(3,N), v_h(3,N))

  do i = 1, N
    real :: angle
    angle = 2.0 * 3.141592 * real(i) / real(N)
    r_h(1,i) = 1.0 * cos(angle)
    r_h(2,i) = 1.0 * sin(angle)
    r_h(3,i) = 0.0
  end do

  sigma = sqrt(2.0 * kB * T / m)
  call random_seed()    
  do i = 1, N
    call maxwell_velocity_3d(vx, vy, vz, sigma)   !초기속도 맥스웰리안
    v_h(1,i) = vx
    v_h(2,i) = vy
    v_h(3,i) = vz
  end do

  call cudaMemcpy(r_d, r_h, size(r_h)*4, cudaMemcpyHostToDevice)
  call cudaMemcpy(v_d, v_h, size(v_h)*4, cudaMemcpyHostToDevice)

  dt = 1.0e-11
  steps = 10000   !스텝 수수
  threadsPerBlock = 256
  numBlocks = (N + threadsPerBlock - 1) / threadsPerBlock

  call rk4_kernel<<<numBlocks, threadsPerBlock>>>(r_d, v_d, dt, steps)

  call cudaMemcpy(r_h, r_d, size(r_h)*4, cudaMemcpyDeviceToHost)

  open(unit=10, file='trajectory.txt', status='replace')
  do i = 1, N
    write(10,'(I6,1X,E15.8,1X,E15.8,1X,E15.8)') i, r_h(1,i)-1.0, r_h(2,i), r_h(3,i)
  end do
  close(10)

end program main

subroutine maxwell_velocity_3d(vx, vy, vz, sigma)
  real, intent(out) :: vx, vy, vz
  real, intent(in) :: sigma
  real :: u1, u2, u3, v, theta, phi

  call random_number(u1)
  call random_number(u2)
  call random_number(u3)

  v = sigma * sqrt(-2.0 * log(u1))
  theta = acos(1.0 - 2.0 * u2)
  phi   = 2.0 * 3.141592 * u3

  vx = v * sin(theta) * cos(phi)
  vy = v * sin(theta) * sin(phi)
  vz = v * cos(theta)
end subroutine maxwell_velocity_3d
